%!PS-Adobe-2.0
%%Title: mahi.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Aug 31 14:47:20 2017
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -73 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 220 scalefont setfont
1.000 UL
LTb
1386 660 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 660 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 0)]
] -73.3 MRshow
1.000 UL
LTb
1386 1072 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 1072 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 2000)]
] -73.3 MRshow
1.000 UL
LTb
1386 1483 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 1483 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 4000)]
] -73.3 MRshow
1.000 UL
LTb
1386 1895 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 1895 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 6000)]
] -73.3 MRshow
1.000 UL
LTb
1386 2306 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 2306 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 8000)]
] -73.3 MRshow
1.000 UL
LTb
1386 2718 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 2718 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 10000)]
] -73.3 MRshow
1.000 UL
LTb
1386 3130 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 3130 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 12000)]
] -73.3 MRshow
1.000 UL
LTb
1386 3541 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 3541 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 14000)]
] -73.3 MRshow
1.000 UL
LTb
1386 3953 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 3953 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 16000)]
] -73.3 MRshow
1.000 UL
LTb
1386 4364 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 4364 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 18000)]
] -73.3 MRshow
1.000 UL
LTb
1386 4776 M
63 0 V
5377 0 R
-63 0 V
stroke
1254 4776 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 20000)]
] -73.3 MRshow
1.000 UL
LTb
1386 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1386 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 0)]
] -73.3 MCshow
1.000 UL
LTb
1930 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1930 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 10)]
] -73.3 MCshow
1.000 UL
LTb
2474 660 M
0 63 V
0 4053 R
0 -63 V
stroke
2474 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 20)]
] -73.3 MCshow
1.000 UL
LTb
3018 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3018 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 30)]
] -73.3 MCshow
1.000 UL
LTb
3562 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3562 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 40)]
] -73.3 MCshow
1.000 UL
LTb
4106 660 M
0 63 V
0 4053 R
0 -63 V
stroke
4106 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 50)]
] -73.3 MCshow
1.000 UL
LTb
4650 660 M
0 63 V
0 4053 R
0 -63 V
stroke
4650 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 60)]
] -73.3 MCshow
1.000 UL
LTb
5194 660 M
0 63 V
0 4053 R
0 -63 V
stroke
5194 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 70)]
] -73.3 MCshow
1.000 UL
LTb
5738 660 M
0 63 V
0 4053 R
0 -63 V
stroke
5738 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 80)]
] -73.3 MCshow
1.000 UL
LTb
6282 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6282 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 90)]
] -73.3 MCshow
1.000 UL
LTb
6826 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6826 440 M
[ [(Helvetica) 220.0 0.0 true true 0 ( 100)]
] -73.3 MCshow
1.000 UL
LTb
1.000 UL
LTb
1386 660 M
5440 0 V
0 4116 V
-5440 0 V
0 -4116 V
LTb
220 2718 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 220.0 0.0 true true 0 (x)]
] -73.3 MCshow
grestore
LTb
4106 110 M
[ [(Helvetica) 220.0 0.0 true true 0 (i)]
] -73.3 MCshow
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
5839 4603 M
("mahi.txt" using 1:2) Rshow
LT0
5971 4603 M
591 0 V
1440 660 M
55 2 V
54 2 V
55 3 V
54 3 V
54 5 V
55 5 V
54 6 V
55 7 V
54 8 V
54 9 V
55 9 V
54 11 V
55 11 V
54 12 V
54 12 V
55 14 V
54 14 V
55 16 V
54 16 V
54 17 V
55 17 V
54 19 V
55 19 V
54 20 V
54 21 V
55 22 V
54 23 V
55 23 V
54 24 V
54 26 V
55 25 V
54 27 V
55 28 V
54 28 V
54 29 V
55 30 V
54 31 V
55 32 V
54 33 V
54 33 V
55 34 V
54 35 V
55 36 V
54 36 V
54 38 V
55 38 V
54 39 V
55 40 V
54 41 V
54 42 V
55 42 V
54 43 V
55 44 V
54 45 V
54 46 V
55 46 V
54 48 V
55 48 V
54 49 V
54 50 V
55 50 V
54 52 V
55 52 V
54 53 V
54 54 V
55 55 V
54 55 V
55 57 V
54 57 V
54 58 V
55 59 V
54 59 V
55 61 V
54 61 V
54 62 V
55 63 V
54 64 V
55 65 V
54 65 V
54 67 V
55 67 V
54 68 V
55 68 V
54 70 V
54 70 V
55 71 V
54 72 V
55 73 V
54 74 V
54 74 V
55 76 V
54 76 V
55 77 V
54 78 V
54 78 V
55 80 V
54 80 V
55 81 V
1440 660 Pls
1495 662 Pls
1549 664 Pls
1604 667 Pls
1658 670 Pls
1712 675 Pls
1767 680 Pls
1821 686 Pls
1876 693 Pls
1930 701 Pls
1984 710 Pls
2039 719 Pls
2093 730 Pls
2148 741 Pls
2202 753 Pls
2256 765 Pls
2311 779 Pls
2365 793 Pls
2420 809 Pls
2474 825 Pls
2528 842 Pls
2583 859 Pls
2637 878 Pls
2692 897 Pls
2746 917 Pls
2800 938 Pls
2855 960 Pls
2909 983 Pls
2964 1006 Pls
3018 1030 Pls
3072 1056 Pls
3127 1081 Pls
3181 1108 Pls
3236 1136 Pls
3290 1164 Pls
3344 1193 Pls
3399 1223 Pls
3453 1254 Pls
3508 1286 Pls
3562 1319 Pls
3616 1352 Pls
3671 1386 Pls
3725 1421 Pls
3780 1457 Pls
3834 1493 Pls
3888 1531 Pls
3943 1569 Pls
3997 1608 Pls
4052 1648 Pls
4106 1689 Pls
4160 1731 Pls
4215 1773 Pls
4269 1816 Pls
4324 1860 Pls
4378 1905 Pls
4432 1951 Pls
4487 1997 Pls
4541 2045 Pls
4596 2093 Pls
4650 2142 Pls
4704 2192 Pls
4759 2242 Pls
4813 2294 Pls
4868 2346 Pls
4922 2399 Pls
4976 2453 Pls
5031 2508 Pls
5085 2563 Pls
5140 2620 Pls
5194 2677 Pls
5248 2735 Pls
5303 2794 Pls
5357 2853 Pls
5412 2914 Pls
5466 2975 Pls
5520 3037 Pls
5575 3100 Pls
5629 3164 Pls
5684 3229 Pls
5738 3294 Pls
5792 3361 Pls
5847 3428 Pls
5901 3496 Pls
5956 3564 Pls
6010 3634 Pls
6064 3704 Pls
6119 3775 Pls
6173 3847 Pls
6228 3920 Pls
6282 3994 Pls
6336 4068 Pls
6391 4144 Pls
6445 4220 Pls
6500 4297 Pls
6554 4375 Pls
6608 4453 Pls
6663 4533 Pls
6717 4613 Pls
6772 4694 Pls
6266 4603 Pls
1.000 UL
LTb
1386 660 M
5440 0 V
0 4116 V
-5440 0 V
0 -4116 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
